=======================================================================================================================
Selection: 12
=======================================================================================================================
|                                                                                          |   0%
| One of the great advantages of using a statistical programming language like R is its vast
| collection of tools for simulating random numbers.
...
|===                                                                                       |   3%
| This lesson assumes familiarity with a few common probability distributions, but these topics
| will only be discussed with respect to random number generation. Even if you have no prior
| experience with these concepts, you should be able to complete the lesson and understand the main
| ideas.
...
|======                                                                                    |   6%
| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the
| documentation.
> ?sample
| You got it right!
|========                                                                                  |   9%
| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).
> 
> sample(1:6, 4, replace = TRUE)
[1] 2 4 3 6
| Excellent job!
|===========                                                                               |  12%
| Now repeat the command to see how your result differs. (The probability of rolling the exact same
| result is (1/6)^4 = 0.00077, which is pretty small!)
> sample(1:6, 4, replace = TRUE)
[1] 4 2 6 3
| That's correct!
|==============                                                                            |  16%
| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH
| replacement. Sampling with replacement simply means that each number is "replaced" after it is
| selected, so that the same number can show up more than once. This is what we want here, since
| what you roll on one die shouldn't affect what you roll on any of the others.
...
|=================                                                                         |  19%
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement,
| simply leave off the 'replace' argument.
> sample(1:20, 10, replace = FALSE)
[1]  2 18 20  5 13  6  7  1 11 17
| You're close...I can feel it! Try it again. Or, type info() for more options.
| Type sample(1:20, 10) to sample 10 numbers between 1 and 20, without replacement.
> sample(1:20, 10)
[1]  4  3 19 16 10  1 20 12  9  7
| You are amazing!
|====================                                                                      |  22%
| Since the last command sampled without replacement, no number appears more than once in the
| output.
...
|======================                                                                    |  25%
| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English
| alphabet. Take a look at it now.
> LETTERS
[1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X"
[25] "Y" "Z"
| You're the best!
|=========================                                                                 |  28%
| The sample() function can also be used to permute, or rearrange, the elements of a vector. For
| example, try sample(LETTERS) to permute all 26 letters of the English alphabet.
> sample(LETTERS)
[1] "J" "K" "B" "Z" "N" "C" "I" "W" "M" "P" "H" "S" "O" "L" "Y" "E" "X" "V" "F" "A" "Q" "D" "T" "U"
[25] "R" "G"
| All that practice is paying off!
|============================                                                              |  31%
| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the
| 'size' argument to sample() is not specified, R takes a sample equal in size to the vector from
| which you are sampling.
...
|===============================                                                           |  34%
| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has
| a 0.3 probability of landing 'tails' and a 0.7 probability of landing 'heads'.
...
|==================================                                                        |  38%
| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of
| size 100 from the vector c(0,1), with replacement. Since the coin is unfair, we must attach
| specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob =
| c(0.3, 0.7). Assign the result to a new variable called flips.
> flips<-sample(c(0,1), 100, replace=TRUE, c(0.3,0.7))
| You nailed it! Good job!
|=====================================                                                     |  41%
| View the contents of the flips variable.
> flips
[1] 1 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 0 1 1
[48] 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1
[95] 1 0 1 1 1 1
| Excellent job!
|=======================================                                                   |  44%
| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect
| approximately 70 of our coin flips to have the value 1. Count the actual number of 1s contained
| in flips using the sum() function.
> sum(flips==1)
[1] 77
| Not exactly. Give it another go. Or, type info() for more options.
| sum(flips) will add up all the 1s and 0s, giving you the total number of 1s in flips.
> sum(flips)
[1] 77
| Your dedication is inspiring!
|==========================================                                                |  47%
| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin
| flips), so we can use use rbinom() to simulate a binomial random variable. Pull up the
| documentation for rbinom() using ?rbinom.
> ?rbinom
| Excellent work!
|=============================================                                             |  50%
| Each probability distribution in R has an r*** function (for "random"), a d*** function (for
| "density"), a p*** (for "probability"), and q*** (for "quantile"). We are most interested in the
| r*** functions in this lesson, but I encourage you to explore the others on your own.
...
|================================================                                          |  53%
| A binomial random variable represents the number of 'successes' (heads) in a given number of
| independent 'trials' (coin flips). Therefore, we can generate a single random variable that
| represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob =
| 0.7). Note that you only specify the probability of 'success' (heads) and NOT the probability of
| 'failure' (tails). Try it now.
> rbinom(1, size = 100, prob = 0.7)
[1] 70
| You're the best!
|===================================================                                       |  56%
| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of
| size 1, with success probability of 0.7. Give it a try, assigning the result to a new variable
| called flips2.
> flips2 <- rbinom(1, size = 100, prob = 0.7)
| You almost had it, but not quite. Try again. Or, type info() for more options.
| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.
> flips2 <- rbinom(n=100,size=1 prob = 0.7)
Error: unexpected symbol in "flips2 <- rbinom(n=100,size=1 prob"
> flips2 <- rbinom(100, size=1 prob = 0.7)
Error: unexpected symbol in "flips2 <- rbinom(100, size=1 prob"
> flips2<-rbinom(100, size=1 prob=0.7)
Error: unexpected symbol in "flips2<-rbinom(100, size=1 prob"
> flips2<-rbinom(100, 1 prob=0.7)
Error: unexpected symbol in "flips2<-rbinom(100, 1 prob"
> flips2<-rbinom(100, size=1, prob=0.7)
| Perseverance, that's the answer.
|=====================================================                                     |  59%
| View the contents of flips2.
> flips2
[1] 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 0 1
[48] 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 1 1
[95] 1 1 1 0 1 0
| Perseverance, that's the answer.
|========================================================                                  |  62%
| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!
> sum(flips2)
[1] 76
| You got it!
|===========================================================                               |  66%
| Similar to rbinom(), we can use R to simulate random numbers from many other probability
| distributions. Pull up the documentation for rnorm() now.
> ?rnorm
| You are doing so well!
|==============================================================                            |  69%
| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the
| 'Usage' section in the documentation, the default values for the 'mean' and 'sd' arguments to
| rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a
| standard normal distribution. Give it a try.
> rnorm(10)
[1]  0.07290788  0.85030981 -0.01880057 -0.94288203  0.04777417  0.20265527  0.98492809 -1.56056106
[9]  1.37487965 -1.81685682
| You got it!
|=================================================================                         |  72%
| Now do the same, except with a mean of 100 and a standard deviation of 25.
> rnorm(10,mean=100,sd=25)
[1]  91.27493 116.67734  85.23352 111.25555 122.40385 137.36916 171.77857  92.01726  95.70571
[10]  67.80646
| You are really on a roll!
|====================================================================                      |  75%
| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values
| generated from a Poisson distribution with mean 10? Let's start with one group of 5 numbers, then
| I'll show you how to repeat the operation 100 times in a convenient and compact way.
...
|======================================================================                    |  78%
| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation
| for rpois() if you need help.
> ?rpois
> rpois(5)
Error in rpois(5) : argument "lambda" is missing, with no default
> rpois(5,1)
[1] 0 2 0 2 0
| Give it another try. Or, type info() for more options.
| Use rpois(5, 10) to generate 5 random numbers from a Poisson distribution with mean 10.
> rpois(5,10)
[1]  7  8 11 10 10
| Nice work!
|=========================================================================                 |  81%
| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a
| new variable called my_pois.
> my_pois<-replicate(100,rpois(5,10))
| You are amazing!
|============================================================================              |  84%
| Take a look at the contents of my_pois.
> my_pois
	[,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17]
[1,]    9   15    9   10    6    7   12    7   11     9    10    11     5    11     9     4    11
[2,]   10   14    7    6   12   12    9   11   11     9    10     8     8    11    11    11    15
[3,]   13    9   14   14    9   12    5   17    9    11    14    10     7    11    12     6     7
[4,]   12    7    7   10   16   11    6    5    9     9     7    12    16    14    16    13     9
[5,]   10   15    8   10    9   16    9   10   11     5    11     8    13     8     8    10    14
	[,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,]    11    14    12     8     9     7    11    11     6     8     8     4    10    11     9
[2,]    11     8     6    15    11     9    11     4     9     9     4    10    12    11    13
[3,]     4    11     9    11     8    11     7     6     8    11    10     9    11    13     7
[4,]    11     8     9     6     3     9    10    13     8     7    10     9     6     7     6
[5,]    11     6     8     9    12     9     7    14     9     3     9    11     9     7     9
	[,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47]
[1,]    18     8    11    15     8    14     6     9    10    13     4    11     5    16     9
[2,]    10     4     6    10    10    18     5     5    20     5    11     8     9    10     8
[3,]     9    12    13     9    14    10    13    13     9     6     8    15    10    10     8
[4,]    10     9     8    10     9    10    10    10     8    10     8     8    10    15    13
[5,]    13     4    11     9    15     9     9     3     9     9     8    12    11    11     9
	[,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]
[1,]     9     6     5     6    12     6    11    10     9    11    11    10     9    12    11
[2,]    13    11    10    12     9     9    10     9     9    16     7     7     7     7    17
[3,]    12     6    12     9     5    12    12     5    13    10     8     9    15    12     6
[4,]    11    15     9    11    10     6     4     6    10    12     7    12    12     9    15
[5,]     9    10     8    16    13    12     7    13     6     9    10     9     2    11     9
	[,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77]
[1,]     7    12    10     8     6     4    10     8    13     8    11     5    13    11     6
[2,]    11    13    10    14     7     9    13     4    11     5     9     9    11     7    11
[3,]     6     7    14     7     9    13    12    13     8     8    17    11    12     4    11
[4,]     9    11     9     8    11    11    12    13     8     8     9     6    17     9    12
[5,]    16    10     8    11     9    14     8    10    12    12    14    11    10    15    14
	[,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92]
[1,]    10     7    11     6     9     9     8     9    11    15    10    12    10     8     8
[2,]    15     9    11    10     2     9    10    13     7    10    14     8    20     8     9
[3,]     7     7     8     9    18    15    11     7     9     8     9    11    13     8    11
[4,]    11     6    12    10     6    17     7     7     8     6    16    17     9    13     9
[5,]     1     9     8     8    12     7     6    15     7    11    10    10     8     6    11
	[,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]    12     5    13    10     6     8     9     14
[2,]     5     8     9    11    10    11    14      9
[3,]    12    13     6    13    17    14    10      9
[4,]     9    16    14    15    10     8    15      8
[5,]    13    11    13    10    18    17    17     16
| Your dedication is inspiring!
|===============================================================================           |  88%
| replicate() created a matrix, each column of which contains 5 random numbers generated from a
| Poisson distribution with mean 10. Now we can find the mean of each column in my_pois using the
| colMeans() function. Store the result in a variable called cm.
> cm<-colMeans(my_pois)
| Keep up the great work!
|==================================================================================        |  91%
| And let's take a look at the distribution of our column means by plotting a histogram with
| hist(cm).
> hist(cm)
| All that hard work is paying off!
|====================================================================================      |  94%
| Looks like our column means are almost normally distributed, right? That's the Central Limit
| Theorem at work, but that's a lesson for another day!
...
|=======================================================================================   |  97%
| All of the standard probability distributions are built into R, including exponential (rexp()),
| chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the pattern.
...
|==========================================================================================| 100%
| Simulation is practically a field of its own and we've only skimmed the surface of what's
| possible. I encourage you to explore these and other functions further on your own.
...
